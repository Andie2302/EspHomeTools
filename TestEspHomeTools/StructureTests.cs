using EspHomeTools.Classes.Scalars;
using EspHomeTools.Classes.Structures;
using System.Text;

namespace TestEspHomeTools;

/// <summary>
/// Provides unit tests to validate the functionality and accuracy of structures,
/// with a primary focus on YAML mappings and sequences.
/// </summary>
[TestClass]
public class StructureTests
{
    /// Unit test that verifies the correct generation of a YAML representation
    /// from a YamlMapping object populated with simple scalar data.
    /// This test ensures:
    /// - YamlMapping handles adding scalar key-value pairs accurately.
    /// - The ToYaml method outputs a valid YAML string matching the expected layout.
    /// Expected behavior:
    /// - Scalar types like strings, booleans, and integers are serialized seamlessly into a well-formed YAML structure.
    /// - The output string adheres to YAML formatting conventions, preserving data correctness.
    [TestMethod]
    public void YamlMapping_WithSimpleScalars_GeneratesCorrectYaml()
    {
        var mapping = new YamlMapping
        {
            { "name", new YamlString("My Device") },
            { "enabled", new YamlBool(true) },
            { "retries", new YamlInt(5) }
        };

        var expected = new StringBuilder();
        expected.AppendLine("name: My Device");
        expected.AppendLine("enabled: true");
        expected.Append("retries: 5");
        var actual = mapping.ToYaml().Trim();
        Assert.AreEqual(expected.ToString(), actual);
    }

    /// Unit test that validates the generation of a YAML representation
    /// from a YamlMapping containing an inner nested mapping structure.
    /// This test:
    /// - Creates a nested YamlMapping instance with scalar key-value pairs.
    /// - Embeds the nested mapping within a root YamlMapping.
    /// - Ensures the YAML output generated by the ToYaml method accurately represents
    /// the nested structure with correct formatting and indentation.
    /// Expected behavior:
    /// - The root mapping includes the nested mapping as a value.
    /// - The nested mapping is correctly serialized and indented in the output.
    /// - The resulting YAML string matches the pre-defined expected structure.
    [TestMethod]
    public void YamlMapping_WithNestedMapping_GeneratesCorrectYaml()
    {
        var nestedMapping = new YamlMapping
        {
            { "ssid", new YamlString("MyWifi") },
            { "password", new YamlString("secret") }
        };

        var rootMapping = new YamlMapping
        {
            { "wifi", nestedMapping }
        };

        var expected = new StringBuilder();
        expected.AppendLine("wifi:");
        expected.AppendLine("  ssid: MyWifi");
        expected.Append("  password: secret");
        var actual = rootMapping.ToYaml().Trim();
        Assert.AreEqual(expected.ToString(), actual);
    }

    /// Unit test that verifies the functionality of generating a YAML representation
    /// from a YamlSequence instance containing simple scalar elements.
    /// This test:
    /// - Creates a YamlSequence instance with scalar elements such as strings and integers.
    /// - Verifies that the YAML output produced by the ToYaml method matches the expected format.
    /// Expected behavior:
    /// - Elements in the sequence are serialized correctly in YAML sequence format.
    /// - The output adheres to YAML formatting rules, including proper indentation and element representation.
    [TestMethod]
    public void YamlSequence_WithSimpleScalars_GeneratesCorrectYaml()
    {
        var sequence = new YamlSequence
        {
            new YamlString("item1"),
            new YamlString("item2"),
            new YamlInt(3)
        };

        var expected = new StringBuilder();
        expected.AppendLine("- item1");
        expected.AppendLine("- item2");
        expected.Append("- 3");
        var actual = sequence.ToYaml().Trim();
        Assert.AreEqual(expected.ToString(), actual);
    }

    /// Unit test for verifying the generation of a YAML sequence containing multiple nested mappings.
    /// This test:
    /// - Creates a YamlSequence instance and populates it with YamlMapping objects.
    /// - Verifies that each mapping within the sequence is correctly serialized into YAML format.
    /// - Checks that the resultant sequence adheres to proper YAML formatting, ensuring correct indentation and structure.
    /// Expected behavior:
    /// - Each YamlMapping in the sequence is serialized as a set of key-value pairs.
    /// - The sequence retains its integrity when serialized, with each mapping output on a new line.
    /// - The YAML output aligns with the expected textual representation defined in the test case.
    [TestMethod]
    public void YamlSequence_WithMappings_GeneratesCorrectYaml()
    {
        var sequence = new YamlSequence
        {
            new YamlMapping { { "platform", new YamlString("dht") }, { "pin", new YamlString("D1") } },
            new YamlMapping { { "platform", new YamlString("gpio") }, { "pin", new YamlString("D2") } }
        };

        var expected = new StringBuilder();
        expected.AppendLine("- platform: dht");
        expected.AppendLine("  pin: D1");
        expected.AppendLine("- platform: gpio");
        expected.Append("  pin: D2");
        var actual = sequence.ToYaml().Trim();
        Assert.AreEqual(expected.ToString(), actual);
    }
}
